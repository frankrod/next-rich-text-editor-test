{"ast":null,"code":"import { ContentBlock, EditorState, genKey } from 'draft-js';\nexport default function insertBlockAfter(editorState, blockKey, newType) {\n  var content = editorState.getCurrentContent();\n  var blockMap = content.getBlockMap();\n  var block = blockMap.get(blockKey);\n  var blocksBefore = blockMap.toSeq().takeUntil(function (v) {\n    return v === block;\n  });\n  var blocksAfter = blockMap.toSeq().skipUntil(function (v) {\n    return v === block;\n  }).rest();\n  var newBlockKey = genKey();\n  var newBlock = new ContentBlock({\n    key: newBlockKey,\n    type: newType,\n    text: '',\n    characterList: block.getCharacterList().slice(0, 0),\n    depth: 0\n  });\n  var newBlockMap = blocksBefore.concat([[blockKey, block], [newBlockKey, newBlock]], blocksAfter).toOrderedMap();\n  var selection = editorState.getSelection();\n  var newContent = content.merge({\n    blockMap: newBlockMap,\n    selectionBefore: selection,\n    selectionAfter: selection.merge({\n      anchorKey: newBlockKey,\n      anchorOffset: 0,\n      focusKey: newBlockKey,\n      focusOffset: 0,\n      isBackward: false\n    })\n  });\n  return EditorState.push(editorState, newContent, 'split-block');\n}","map":{"version":3,"sources":["/Users/franklinrodriguez/Desktop/next-test/node_modules/react-rte/lib/lib/insertBlockAfter.js"],"names":["ContentBlock","EditorState","genKey","insertBlockAfter","editorState","blockKey","newType","content","getCurrentContent","blockMap","getBlockMap","block","get","blocksBefore","toSeq","takeUntil","v","blocksAfter","skipUntil","rest","newBlockKey","newBlock","key","type","text","characterList","getCharacterList","slice","depth","newBlockMap","concat","toOrderedMap","selection","getSelection","newContent","merge","selectionBefore","selectionAfter","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","push"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,EAAoCC,MAApC,QAAkD,UAAlD;AAEA,eAAe,SAASC,gBAAT,CAA0BC,WAA1B,EAAuCC,QAAvC,EAAiDC,OAAjD,EAA0D;AACvE,MAAIC,OAAO,GAAGH,WAAW,CAACI,iBAAZ,EAAd;AACA,MAAIC,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAf;AACA,MAAIC,KAAK,GAAGF,QAAQ,CAACG,GAAT,CAAaP,QAAb,CAAZ;AACA,MAAIQ,YAAY,GAAGJ,QAAQ,CAACK,KAAT,GAAiBC,SAAjB,CAA2B,UAAUC,CAAV,EAAa;AACzD,WAAOA,CAAC,KAAKL,KAAb;AACD,GAFkB,CAAnB;AAGA,MAAIM,WAAW,GAAGR,QAAQ,CAACK,KAAT,GAAiBI,SAAjB,CAA2B,UAAUF,CAAV,EAAa;AACxD,WAAOA,CAAC,KAAKL,KAAb;AACD,GAFiB,EAEfQ,IAFe,EAAlB;AAGA,MAAIC,WAAW,GAAGlB,MAAM,EAAxB;AACA,MAAImB,QAAQ,GAAG,IAAIrB,YAAJ,CAAiB;AAC9BsB,IAAAA,GAAG,EAAEF,WADyB;AAE9BG,IAAAA,IAAI,EAAEjB,OAFwB;AAG9BkB,IAAAA,IAAI,EAAE,EAHwB;AAI9BC,IAAAA,aAAa,EAAEd,KAAK,CAACe,gBAAN,GAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,CAAlC,CAJe;AAK9BC,IAAAA,KAAK,EAAE;AALuB,GAAjB,CAAf;AAOA,MAAIC,WAAW,GAAGhB,YAAY,CAACiB,MAAb,CAAoB,CAAC,CAACzB,QAAD,EAAWM,KAAX,CAAD,EAAoB,CAACS,WAAD,EAAcC,QAAd,CAApB,CAApB,EAAkEJ,WAAlE,EAA+Ec,YAA/E,EAAlB;AACA,MAAIC,SAAS,GAAG5B,WAAW,CAAC6B,YAAZ,EAAhB;AACA,MAAIC,UAAU,GAAG3B,OAAO,CAAC4B,KAAR,CAAc;AAC7B1B,IAAAA,QAAQ,EAAEoB,WADmB;AAE7BO,IAAAA,eAAe,EAAEJ,SAFY;AAG7BK,IAAAA,cAAc,EAAEL,SAAS,CAACG,KAAV,CAAgB;AAC9BG,MAAAA,SAAS,EAAElB,WADmB;AAE9BmB,MAAAA,YAAY,EAAE,CAFgB;AAG9BC,MAAAA,QAAQ,EAAEpB,WAHoB;AAI9BqB,MAAAA,WAAW,EAAE,CAJiB;AAK9BC,MAAAA,UAAU,EAAE;AALkB,KAAhB;AAHa,GAAd,CAAjB;AAWA,SAAOzC,WAAW,CAAC0C,IAAZ,CAAiBvC,WAAjB,EAA8B8B,UAA9B,EAA0C,aAA1C,CAAP;AACD","sourcesContent":["import { ContentBlock, EditorState, genKey } from 'draft-js';\n\nexport default function insertBlockAfter(editorState, blockKey, newType) {\n  var content = editorState.getCurrentContent();\n  var blockMap = content.getBlockMap();\n  var block = blockMap.get(blockKey);\n  var blocksBefore = blockMap.toSeq().takeUntil(function (v) {\n    return v === block;\n  });\n  var blocksAfter = blockMap.toSeq().skipUntil(function (v) {\n    return v === block;\n  }).rest();\n  var newBlockKey = genKey();\n  var newBlock = new ContentBlock({\n    key: newBlockKey,\n    type: newType,\n    text: '',\n    characterList: block.getCharacterList().slice(0, 0),\n    depth: 0\n  });\n  var newBlockMap = blocksBefore.concat([[blockKey, block], [newBlockKey, newBlock]], blocksAfter).toOrderedMap();\n  var selection = editorState.getSelection();\n  var newContent = content.merge({\n    blockMap: newBlockMap,\n    selectionBefore: selection,\n    selectionAfter: selection.merge({\n      anchorKey: newBlockKey,\n      anchorOffset: 0,\n      focusKey: newBlockKey,\n      focusOffset: 0,\n      isBackward: false\n    })\n  });\n  return EditorState.push(editorState, newContent, 'split-block');\n}"]},"metadata":{},"sourceType":"module"}