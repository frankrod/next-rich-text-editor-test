{"ast":null,"code":"import _JSON$stringify from 'babel-runtime/core-js/json/stringify';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport { ContentState, EditorState, convertToRaw, convertFromRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { stateToMarkdown } from 'draft-js-export-markdown';\nimport { stateFromMarkdown } from 'draft-js-import-markdown';\n\nvar EditorValue = function () {\n  function EditorValue(editorState) {\n    var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, EditorValue);\n\n    this._cache = cache;\n    this._editorState = editorState;\n  }\n\n  _createClass(EditorValue, [{\n    key: 'getEditorState',\n    value: function getEditorState() {\n      return this._editorState;\n    }\n  }, {\n    key: 'setEditorState',\n    value: function setEditorState(editorState) {\n      return this._editorState === editorState ? this : new EditorValue(editorState);\n    }\n  }, {\n    key: 'toString',\n    value: function toString(format, options) {\n      var fromCache = this._cache[format];\n\n      if (fromCache != null) {\n        return fromCache;\n      }\n\n      return this._cache[format] = _toString(this.getEditorState(), format, options);\n    }\n  }, {\n    key: 'setContentFromString',\n    value: function setContentFromString(markup, format, options) {\n      var editorState = EditorState.push(this._editorState, fromString(markup, format, options), 'secondary-paste');\n      return new EditorValue(editorState, _defineProperty({}, format, markup));\n    }\n  }], [{\n    key: 'createEmpty',\n    value: function createEmpty(decorator) {\n      var editorState = EditorState.createEmpty(decorator);\n      return new EditorValue(editorState);\n    }\n  }, {\n    key: 'createFromState',\n    value: function createFromState(editorState) {\n      return new EditorValue(editorState);\n    }\n  }, {\n    key: 'createFromString',\n    value: function createFromString(markup, format, decorator, options) {\n      var contentState = fromString(markup, format, options);\n      var editorState = EditorState.createWithContent(contentState, decorator);\n      return new EditorValue(editorState, _defineProperty({}, format, markup));\n    }\n  }]);\n\n  return EditorValue;\n}();\n\nexport default EditorValue;\n\nfunction _toString(editorState, format, options) {\n  var contentState = editorState.getCurrentContent();\n\n  switch (format) {\n    case 'html':\n      {\n        return stateToHTML(contentState, options);\n      }\n\n    case 'markdown':\n      {\n        return stateToMarkdown(contentState);\n      }\n\n    case 'raw':\n      {\n        return _JSON$stringify(convertToRaw(contentState));\n      }\n\n    default:\n      {\n        throw new Error('Format not supported: ' + format);\n      }\n  }\n}\n\nfunction fromString(markup, format, options) {\n  switch (format) {\n    case 'html':\n      {\n        return stateFromHTML(markup, options);\n      }\n\n    case 'markdown':\n      {\n        return stateFromMarkdown(markup, options);\n      }\n\n    case 'raw':\n      {\n        return convertFromRaw(JSON.parse(markup));\n      }\n\n    default:\n      {\n        throw new Error('Format not supported: ' + format);\n      }\n  }\n}","map":{"version":3,"sources":["/Users/franklinrodriguez/Desktop/next-test/node_modules/react-rte/lib/lib/EditorValue.js"],"names":["_JSON$stringify","_defineProperty","_classCallCheck","_createClass","ContentState","EditorState","convertToRaw","convertFromRaw","stateToHTML","stateFromHTML","stateToMarkdown","stateFromMarkdown","EditorValue","editorState","cache","arguments","length","undefined","_cache","_editorState","key","value","getEditorState","setEditorState","toString","format","options","fromCache","_toString","setContentFromString","markup","push","fromString","createEmpty","decorator","createFromState","createFromString","contentState","createWithContent","getCurrentContent","Error","JSON","parse"],"mappings":"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","sourcesContent":["import _JSON$stringify from 'babel-runtime/core-js/json/stringify';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport { ContentState, EditorState, convertToRaw, convertFromRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { stateToMarkdown } from 'draft-js-export-markdown';\nimport { stateFromMarkdown } from 'draft-js-import-markdown';\n\nvar EditorValue = function () {\n  function EditorValue(editorState) {\n    var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, EditorValue);\n\n    this._cache = cache;\n    this._editorState = editorState;\n  }\n\n  _createClass(EditorValue, [{\n    key: 'getEditorState',\n    value: function getEditorState() {\n      return this._editorState;\n    }\n  }, {\n    key: 'setEditorState',\n    value: function setEditorState(editorState) {\n      return this._editorState === editorState ? this : new EditorValue(editorState);\n    }\n  }, {\n    key: 'toString',\n    value: function toString(format, options) {\n      var fromCache = this._cache[format];\n      if (fromCache != null) {\n        return fromCache;\n      }\n      return this._cache[format] = _toString(this.getEditorState(), format, options);\n    }\n  }, {\n    key: 'setContentFromString',\n    value: function setContentFromString(markup, format, options) {\n      var editorState = EditorState.push(this._editorState, fromString(markup, format, options), 'secondary-paste');\n      return new EditorValue(editorState, _defineProperty({}, format, markup));\n    }\n  }], [{\n    key: 'createEmpty',\n    value: function createEmpty(decorator) {\n      var editorState = EditorState.createEmpty(decorator);\n      return new EditorValue(editorState);\n    }\n  }, {\n    key: 'createFromState',\n    value: function createFromState(editorState) {\n      return new EditorValue(editorState);\n    }\n  }, {\n    key: 'createFromString',\n    value: function createFromString(markup, format, decorator, options) {\n      var contentState = fromString(markup, format, options);\n      var editorState = EditorState.createWithContent(contentState, decorator);\n      return new EditorValue(editorState, _defineProperty({}, format, markup));\n    }\n  }]);\n\n  return EditorValue;\n}();\n\nexport default EditorValue;\n\n\nfunction _toString(editorState, format, options) {\n  var contentState = editorState.getCurrentContent();\n  switch (format) {\n    case 'html':\n      {\n        return stateToHTML(contentState, options);\n      }\n    case 'markdown':\n      {\n        return stateToMarkdown(contentState);\n      }\n    case 'raw':\n      {\n        return _JSON$stringify(convertToRaw(contentState));\n      }\n    default:\n      {\n        throw new Error('Format not supported: ' + format);\n      }\n  }\n}\n\nfunction fromString(markup, format, options) {\n  switch (format) {\n    case 'html':\n      {\n        return stateFromHTML(markup, options);\n      }\n    case 'markdown':\n      {\n        return stateFromMarkdown(markup, options);\n      }\n    case 'raw':\n      {\n        return convertFromRaw(JSON.parse(markup));\n      }\n    default:\n      {\n        throw new Error('Format not supported: ' + format);\n      }\n  }\n}"]},"metadata":{},"sourceType":"module"}